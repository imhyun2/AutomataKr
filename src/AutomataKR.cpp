#include "StdAfx.h"
#include "AutomataKR.h"

const UINT BASE_CODE = 0xac00;		// 기초음성(가)

// 음성 테이블
const TCHAR SOUND_TABLE[68] =
{
	/* 초성 19자 0 ~ 18 */
	_T('ㄱ'), _T('ㄲ'), _T('ㄴ'), _T('ㄷ'), _T('ㄸ'),
	_T('ㄹ'), _T('ㅁ'), _T('ㅂ'), _T('ㅃ'), _T('ㅅ'),
	_T('ㅆ'), _T('ㅇ'), _T('ㅈ'), _T('ㅉ'), _T('ㅊ'),
	_T('ㅋ'), _T('ㅌ'), _T('ㅍ'), _T('ㅎ'),
	/* 중성 21자 19 ~ 39 */
	_T('ㅏ'), _T('ㅐ'), _T('ㅑ'), _T('ㅒ'), _T('ㅓ'),
	_T('ㅔ'), _T('ㅕ'), _T('ㅖ'), _T('ㅗ'), _T('ㅘ'),
	_T('ㅙ'), _T('ㅚ'), _T('ㅛ'), _T('ㅜ'), _T('ㅝ'),
	_T('ㅞ'), _T('ㅟ'), _T('ㅠ'), _T('ㅡ'), _T('ㅢ'),
	_T('ㅣ'),
	/* 종성 28자 40 ~ 67 */
	_T(' ') , _T('ㄱ'), _T('ㄲ'), _T('ㄳ'), _T('ㄴ'),
	_T('ㄵ'), _T('ㄶ'), _T('ㄷ'), _T('ㄹ'), _T('ㄺ'),
	_T('ㄻ'), _T('ㄼ'), _T('ㄽ'), _T('ㄾ'), _T('ㄿ'),
	_T('ㅀ'), _T('ㅁ'), _T('ㅂ'), _T('ㅄ'), _T('ㅅ'),
	_T('ㅆ'), _T('ㅇ'), _T('ㅈ'), _T('ㅊ'), _T('ㅋ'),
	_T('ㅌ'), _T('ㅍ'), _T('ㅎ')
};

const UINT FREQUENCY_TABLE[40][27] =
{
	{19, 23, 27, 37, 39, 20, 24, 25, 28, 32, 26, 31, 33, 35, 36, 21, 22, 29, 30, 34, 38, 0, 0, 0, 0, 0, 0},		// ㄱ
	{19, 27, 32, 37, 39, 20, 23, 24, 25, 35, 28, 29, 30, 33, 34, 21, 22, 26, 31, 36, 38, 0, 0, 0, 0, 0, 0},		// ㄲ
	{19, 20, 27, 37, 39, 21, 23, 24, 25, 32, 28, 30, 31, 35, 36, 22, 26, 29, 33, 38, 34, 0, 0, 0, 0, 0, 0},		// ㄴ
	{19, 20, 27, 30, 37, 23, 24, 32, 35, 39, 25, 29, 33, 34, 36, 21, 26, 28, 31, 38, 22, 0, 0, 0, 0, 0, 0},		// ㄷ
	{19, 20, 23, 27, 37, 24, 32, 35, 38, 39, 22, 25, 28, 29, 30, 21, 31, 33, 34, 36, 26, 0, 0, 0, 0, 0, 0},		// ㄸ
	{19, 23, 27, 37, 39, 20, 24, 25, 32, 36, 21, 26, 30, 31, 36, 28, 29, 34, 35, 38, 22, 0, 0, 0, 0, 0, 0},		// ㄹ
	{19, 25, 27, 32, 39, 20, 23, 24, 33, 37, 30, 31, 35, 36, 38, 21, 26, 28, 29, 34, 22, 0, 0, 0, 0, 0, 0},		// ㅁ
	{19, 23, 27, 32, 39, 20, 24, 25, 28, 37, 29, 30, 35, 36, 38, 21, 26, 31, 33, 34, 22, 0, 0, 0, 0, 0, 0},		// ㅂ
	{19, 20, 23, 32, 37, 21, 25, 27, 31, 39, 24, 28, 30, 35, 36, 26, 29, 33, 34, 38, 22, 0, 0, 0, 0, 0, 0},		// ㅃ
	{19, 23, 27, 32, 39, 20, 24, 25, 35, 37, 21, 29, 30, 31, 36, 22, 26, 28, 33, 34, 38, 0, 0, 0, 0, 0, 0},		// ㅅ
	{19, 23, 27, 37, 39, 20, 24, 28, 32, 38, 21, 29, 30, 31, 33, 25, 26, 34, 35, 36, 22, 0, 0, 0, 0, 0, 0},		// ㅆ
	{23, 24, 37, 38, 39, 19, 21, 25, 31, 32, 27, 28, 33, 35, 36, 20, 22, 26, 29, 30, 34, 0, 0, 0, 0, 0, 0},		// ㅇ
	{19, 23, 27, 32, 39, 20, 24, 25, 31, 37, 21, 28, 30, 33, 35, 22, 26, 34, 36, 38, 29, 0, 0, 0, 0, 0, 0},		// ㅈ
	{19, 20, 23, 27, 39, 25, 28, 30, 32, 37, 21, 24, 31, 33, 36, 22, 26, 29, 34, 35, 38, 0, 0, 0, 0, 0, 0},		// ㅉ
	{19, 23, 24, 32, 39, 20, 25, 27, 30, 37, 28, 31, 33, 34, 35, 21, 22, 26, 36, 38, 29, 0, 0, 0, 0, 0, 0},		// ㅊ
	{19, 23, 27, 37, 39, 20, 24, 25, 29, 32, 28, 31, 33, 35, 36, 21, 26, 30, 34, 38, 22, 0, 0, 0, 0, 0, 0},		// ㅋ
	{19, 20, 23, 27, 37, 24, 30, 32, 35, 39, 25, 33, 34, 36, 38, 21, 26, 28, 29, 31, 22, 0, 0, 0, 0, 0, 0},		// ㅌ
	{19, 25, 27, 32, 39, 20, 23, 31, 36, 37, 24, 26, 30, 35, 38, 21, 28, 29, 33, 34, 22, 0, 0, 0, 0, 0, 0},		// ㅍ
	{19, 20, 25, 28, 30, 23, 27, 32, 37, 39, 21, 24, 26, 31, 38, 29, 33, 34, 35, 36, 22, 0, 0, 0, 0, 0, 0},		// ㅎ
	{41, 44, 48, 56, 61, 46, 57, 60, 62, 65, 42, 47, 49, 59, 66, 45, 50, 51, 58, 67, 43, 52, 53, 54, 55, 63, 64},	// ㅏ
	{41, 44, 56, 60, 61, 48, 57, 59, 62, 65, 42, 47, 63, 64, 66, 67, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅐ
	{41, 44, 48, 56, 61, 46, 51, 59, 65, 67, 57, 60, 47, 62, 63, 64, 66, 42, 43, 45, 49, 50, 52, 53, 54, 55, 58},	// ㅑ
	{44, 48, 56, 60, 61, 41, 47, 57, 59, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅒ
	{41, 44, 48, 59, 61, 56, 57, 58, 60, 67, 47, 50, 51, 62, 66, 42, 45, 49, 64, 65, 43, 46, 52, 53, 54, 55, 63},	// ㅓ
	{44, 48, 56, 59, 60, 41, 47, 57, 61, 63, 62, 66, 64, 65, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅔ
	{41, 44, 48, 60, 61, 56, 57, 59, 63, 66, 42, 51, 58, 64, 65, 47, 50, 67, 62, 43, 45, 46, 49, 52, 53, 54, 55},	// ㅕ
	{44, 48, 56, 59, 60, 41, 57, 61, 47, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅖ
	{41, 44, 48, 59, 61, 47, 56, 57, 66, 67, 43, 50, 55, 62, 63, 42, 49, 51, 52, 65, 45, 46, 53, 54, 58, 60, 64},	// ㅗ
	{41, 44, 48, 60, 61, 56, 57, 59, 62, 47, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅘ
	{41, 44, 59, 60, 61, 56, 47, 48, 57, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅙ
	{41, 44, 48, 57, 61, 56, 59, 60, 63, 47, 62, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅚ
	{41, 44, 57, 59, 61, 48, 56, 66, 47, 62, 63, 64, 65, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 60},	// ㅛ
	{41, 44, 48, 56, 61, 47, 49, 57, 59, 65, 42, 50, 55, 62, 66, 52, 53, 58, 63, 67, 43, 45, 46, 51, 54, 60, 64},	// ㅜ
	{44, 48, 59, 60, 61, 41, 56, 57, 64, 47, 62, 63, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅝ
	{41, 44, 48, 57, 61, 56, 60, 47, 59, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅞ
	{44, 48, 57, 59, 61, 41, 56, 60, 47, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅟ
	{41, 44, 48, 56, 61, 57, 59, 63, 47, 62, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 60},	// ㅠ
	{44, 48, 56, 57, 61, 41, 47, 49, 59, 65, 46, 54, 55, 62, 66, 50, 58, 63, 64, 67, 42, 43, 45, 51, 52, 63, 60},	// ㅡ
	{44, 48, 56, 57, 61, 41, 59, 60, 47, 62, 63, 64, 65, 66, 67, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58},	// ㅢ
	{41, 44, 48, 56, 60, 57, 59, 61, 63, 66, 47, 49, 55, 62, 65, 50, 64, 67, 42, 43, 45, 46, 51, 52, 53, 54, 58},	// ㅣ
};

CAutomataKR::CAutomataKR(void)
: m_strCompletedText(_T(""))
{
	Clear();
}

CAutomataKR::~CAutomataKR(void)
{
}

// 버퍼 초기화
void CAutomataKR::Clear()
{
	m_uPhonemes[0]		= 0;
	m_uPhonemes[1]		= 0;
	m_uPhonemes[2]		= 40;

	m_chWord			= NULL;
	m_strText			= _T("");

	m_uStatus			= HS_NULL;
}

void CAutomataKR::Reset()
{
	Clear();

	m_strCompletedText = _T("");
}

// 키코드 입력 및 조합 (정해진 int 코드값을 입력 받아 한글조합)
void CAutomataKR::SetKeyCode(int nKeyCode)
{
	// 특수키 입력
	if (nKeyCode < 0)
	{
		if (nKeyCode == KEY_CODE_SPACE)	// 완료
		{
			if (m_chWord != NULL)	// 무언가 입력되어 있는 상태에서 완료를 눌렀을 때
			{
				m_strCompletedText += m_chWord;

				m_chWord	= NULL;
				m_uStatus	= HS_NULL;
			}

			else					// 스페이바 역할
				m_strCompletedText += _T(' ');

			m_strText = m_strCompletedText;
		}

		if (nKeyCode == KEY_CODE_BACKSPACE) // 지우기
		{
			if (m_chWord != NULL)
				--m_uStatus;

			else
			{
				if (m_strCompletedText.GetLength() > 0)
					m_strCompletedText = m_strCompletedText.Left(m_strCompletedText.GetLength() - 1);

				m_uStatus = HS_NULL;
			}
		}
	}

	// 글자 키 입력
	else
	{
		// 초성
		if (nKeyCode <= 18)
		{
			m_uPhonemes[0]	= nKeyCode;

			if (m_uStatus == HS_NULL)
				m_uStatus++;
		}

		// 중성
		else if ((nKeyCode >= 19) && (nKeyCode <= 39))
		{
			m_uPhonemes[1]	= nKeyCode;

			if (m_uStatus == HS_FIRST)
				m_uStatus++;
		}

		// 종성
		else if ((nKeyCode >= 40) && (nKeyCode <= 67))
		{
			m_uPhonemes[2]	= nKeyCode;

			if (m_uStatus == HS_MIDDLE)
				m_uStatus++;
		}
	}

	// 현재 보이는 글자상태
	m_chWord = CombineHangle();

	// 완성 문자열 만들기
	if (m_chWord != NULL) 
		m_strText = m_strCompletedText + m_chWord;

	else
		m_strText = m_strCompletedText;
}

// 한글 조합
TCHAR CAutomataKR::CombineHangle(UINT cho, UINT jung, UINT jong)
{
	// 초성 * 21 * 28 + (중성 - 19) * 28 + (종성 - 40) + BASE_CODE;
	return static_cast<TCHAR>(BASE_CODE - 572 + jong + cho * 588 + jung * 28);
}

TCHAR CAutomataKR::CombineHangle()
{
	switch(m_uStatus)
	{
	// 초성 
	case HS_FIRST:	return SOUND_TABLE[m_uPhonemes[0]];

	//초성 + 중성 + 종성 없음
	case HS_MIDDLE:	return CombineHangle(m_uPhonemes[0], m_uPhonemes[1], 40);

	//초성 + 중성 + 종성
	case HS_END:	return CombineHangle(m_uPhonemes[0], m_uPhonemes[1], m_uPhonemes[2]);

	default:		return NULL;
	}
}

UINT GetCodeOrder(UINT uRow, UINT uCol)
{
	if ((uRow > 40) || (uCol > 27))
		return 0;

	else
		return FREQUENCY_TABLE[uRow][uCol];
}

// 숫자 코드를 문자로 변환
TCHAR ConvertCode2Key(UINT uKeyCode)
{
	if (uKeyCode > 68)
		return NULL;
	
	else
		return SOUND_TABLE[uKeyCode];
}